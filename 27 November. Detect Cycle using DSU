class Solution
{
    public:
    //Function to detect cycle using DSU in an undirected graph.
	
	 bool bfs(int node,vector<int> adj[],vector<bool> &visited,vector<int> &parent)
    {
        parent[node]=-1;
        visited[node]=true;
        queue<int> q;
        q.push(node);
        while(!q.empty())
        {
            node=q.front();
            q.pop();
        for(auto neighbour:adj[node])
        {
            if(!visited[neighbour])
            {
                visited[neighbour]=true;
                parent[neighbour]=node;
                q.push(neighbour);
            }
            else if(visited[neighbour]==true && neighbour!=parent[node])
            return true;
        }
        }
        return false;
    }
    bool detectCycle(int V, vector<int> adj[]) {
        // Code here
        vector<bool> visited(V);
        bool b=false;
        vector<int> parent(V);
        for(int i=0;i<V;i++)
        {
            if(!visited[i])
            {
                b=bfs(i,adj,visited,parent);
                if(b)
                return true;
                
            }
        }
        return false;
    }
};

